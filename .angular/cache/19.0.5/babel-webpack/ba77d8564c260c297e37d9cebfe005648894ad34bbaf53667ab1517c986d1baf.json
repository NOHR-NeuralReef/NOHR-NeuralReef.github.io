{"ast":null,"code":"import _asyncToGenerator from \"/home/subtomic/NOHR/WEBSITE/NOHR-NeuralReef.github.io/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { signal, computed } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DataService = /*#__PURE__*/(() => {\n  class DataService {\n    constructor(http) {\n      this.http = http;\n      this.state = signal({\n        identity: {\n          name: '',\n          image: ''\n        },\n        NavBar: {\n          name: '',\n          image: '',\n          links: []\n        },\n        Home: {},\n        About: {},\n        modules: [],\n        contact: {\n          cards: []\n        },\n        Footer: {\n          citation: {\n            name: '',\n            icon: ''\n          }\n        },\n        Quote: {\n          quote: '',\n          author: ''\n        },\n        Articles: []\n      });\n      this.DEHYDRATED_DATA = window.DEHYDRATED_DATA;\n      this.dataLoaded = new BehaviorSubject(false);\n      this.dataReady$ = this.dataLoaded.asObservable();\n      // Computed values\n      this.identity = computed(() => this.state().identity);\n      this.navBar = computed(() => this.state().NavBar);\n      this.home = computed(() => this.state().Home);\n      this.about = computed(() => this.state().About);\n      this.modules = computed(() => this.state().modules);\n      this.contact = computed(() => this.state().contact?.cards ?? []);\n      this.footer = computed(() => this.state().Footer);\n      this.quote = computed(() => this.state().Quote);\n      this.articles = computed(() => this.state().Articles);\n      // Initialize with dehydrated data if available\n      if (this.DEHYDRATED_DATA) {\n        console.log('Using dehydrated data');\n        this.state.set(this.DEHYDRATED_DATA);\n        this.dataLoaded.next(true);\n      }\n      // Still try to load fresh data\n      if (document.readyState === 'loading') {\n        document.addEventListener('DOMContentLoaded', () => this.initializeData());\n      } else {\n        this.initializeData();\n      }\n    }\n    getData() {\n      return this.state();\n    }\n    initializeData() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        try {\n          const data = window.data;\n          if (!data) {\n            console.log('Using dehydrated data as fallback');\n            if (_this.DEHYDRATED_DATA) {\n              _this.state.set(_this.DEHYDRATED_DATA);\n              _this.dataLoaded.next(true);\n              return;\n            }\n            console.error('Data is undefined');\n            _this.dataLoaded.next(false);\n            return;\n          }\n          if (!_this.validateData(data)) {\n            console.error('Invalid data structure');\n            console.log('Data validation failed:', {\n              hasIdentity: !!data?.identity,\n              hasNavBarLinks: !!data?.NavBar?.links,\n              hasModules: !!data?.modules,\n              hasFooter: !!data?.Footer,\n              hasQuote: !!data?.Quote,\n              hasContact: !!data?.contact?.cards\n            });\n            _this.dataLoaded.next(false);\n            return;\n          }\n          console.log('Setting data in service:', data);\n          _this.state.set(data);\n          _this.dataLoaded.next(true);\n        } catch (error) {\n          console.error('Error loading data:', error);\n          // Use dehydrated data as fallback\n          if (_this.DEHYDRATED_DATA) {\n            console.log('Using dehydrated data after error');\n            _this.state.set(_this.DEHYDRATED_DATA);\n            _this.dataLoaded.next(true);\n            return;\n          }\n          _this.dataLoaded.next(false);\n        }\n      })();\n    }\n    validateData(data) {\n      const isValid = !!(data.identity && data.NavBar?.links && data.modules && data.Footer && data.Quote && data.contact?.cards);\n      console.log('Data validation result:', isValid);\n      return isValid;\n    }\n    // Public method to check if data is loaded\n    isDataLoaded() {\n      return this.dataLoaded.value;\n    }\n    static {\n      this.ɵfac = function DataService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || DataService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: DataService,\n        factory: DataService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return DataService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}